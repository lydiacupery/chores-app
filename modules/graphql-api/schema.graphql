type Snack {
  id: Int!
  name: String!
  voteCount: Int!
}

type Vote {
  id: Int!
  snack: Snack!
}

type Chore {
  id: Int!
  name: String!
}

type Person {
  id: Int!
  firstName: String
  lastName: String
  completedChores: [ChoreEvent]
}

type ChoreEvent {
  id: Int!
  date: String
  person: Person
  chore: Chore
  skip: Boolean
}

type Query {
  allSnacks: [Snack!]
  allChores: [Chore!]
  allPeople: [Person!]
  personById(id: Int!): Person
  choreEvents(person: Int!, chore: Int!): [ChoreEvent]
  whoseTurn(chore: Int!): Person
}

type Mutation {
  addChore(name: String!): Chore
  addPerson(firstName: String, lastName: String): Person
  addEvent(
    personId: Int!
    choreId: Int!
    date: String
    skip: Boolean
  ): ChoreEvent
  incrementTurnAfterEvent(personId: Int!, choreId: Int!): Person
}
